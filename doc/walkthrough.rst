How to build
============

.. highlight:: catkin-sh

Install CMake and ROS bootstrap tools::

  % sudo apt-get install cmake python-rosdep python-rospkg

Install PIP-based ROS bootstrap tools::

  % sudo easy_install -U pip
  % sudo pip install -U rosinstall

Pick a temp directory::

  % cd `mktemp -d`

Get the rosinstall file::

  % wget https://raw.github.com/ros/catkin/master/test/test.rosinstall

Rosinstall it.  You don't want it built, use ``-n``, like this::

  % rosinstall --catkin -n src test.rosinstall

  [list of repositories checked out...]

  rosinstall update complete.

``--catkin`` suppresses the generation of setup.bash/sh files.  Catkin will generate them for you later.

*Remove the generated file ``src/CMakeLists.txt`` which was generated by rosinstall. TODO: rosinstall should be modified to not generate that file or better create the correct symlink directly*.

  % rm src/CMakeLists.txt

*Instead of using rosinstall you could also checkout the repositories manually.*

Then you need a toplevel ``CMakeLists.txt`` for the workspace, make a symlink to ``catkin/cmake/toplevel.cmake``::

  % cd src
  % ln -s catkin/cmake/toplevel.cmake CMakeLists.txt
  % cd ..

When catkin is installed you can use the following command to create the symlink::

  % catkin_init_workspace src

The ``src`` folder should now contain all checked out repositories::

  % ls src
  actionlib/  catkin/  CMakeLists.txt  common_msgs/  gencpp/  genlisp/  genmsg/  genpy/  langs/  langs-dev/  ros/  ros_comm/  roscpp_core/  rospack/  ros_tutorials/  std_msgs/

Now do the typical CMake thing::

  % mkdir build
  % cd build
  % cmake ../src
  -- The C compiler identification is GNU
  -- The CXX compiler identification is GNU

    ...

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -- ~~  traversing projects in topological order:

    ...

  -- Configuring done
  -- Generating done
  -- Build files have been written to: /tmp/tmp.XXX/build

And make (preferably with multiple threads)::

  % make -j4
  Scanning dependencies of target ...
  [  0%] Building CXX object ...

    ...

  [100%] Built target ...

To run all unit tests::

  % make run_tests

Press tab at the end of the command-line to see additional targets for groups of tests and individual tests.
