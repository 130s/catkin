# generated from catkin/cmake/template/pkg-config.cmake.in

# Remove duplicate libraries, generalized from PCLConfig.cmake.in
macro(remove_duplicate_libraries _unfiltered_libraries _final_filtered_libraries)
  set(_filtered_libraries)
  set(_debug_libraries)
  set(_optimized_libraries)
  set(_other_libraries)
  set(_waiting_for_debug 0)
  set(_waiting_for_optimized 0)
  set(_library_position -1)
  foreach(library ${${_unfiltered_libraries}})
    if("${library}" STREQUAL "debug")
      set(_waiting_for_debug 1)
    elseif("${library}" STREQUAL "optimized")
      set(_waiting_for_optimized 1)
    elseif(_waiting_for_debug)
      list(FIND _debug_libraries "${library}" library_position)
      if(library_position EQUAL -1)
        list(APPEND ${_filtered_libraries} debug ${library})
        list(APPEND _debug_libraries ${library})
      endif()
      set(_waiting_for_debug 0)
    elseif(_waiting_for_optimized)
      list(FIND _optimized_libraries "${library}" library_position)
      if(library_position EQUAL -1)
        list(APPEND ${_filtered_libraries} optimized ${library})
        list(APPEND _optimized_libraries ${library})
      endif()
      set(_waiting_for_optimized 0)
    else("${library}" STREQUAL "debug")
      list(FIND _other_libraries "${library}" library_position)
      if(library_position EQUAL -1)
        list(APPEND ${_filtered_libraries} ${library})
        list(APPEND _other_libraries ${library})
      endif()
    endif("${library}" STREQUAL "debug")
  endforeach(library)
  set(_final_filtered_libraries _filtered_libraries)
endmacro(remove_duplicate_libraries)


if(@PROJECT_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PROJECT_NAME@_CONFIG_INCLUDED TRUE)

if(NOT "X@PROJECT_INCLUDE_DIRS@" STREQUAL "X")
  set(@PROJECT_NAME@_INCLUDE_DIRS "")
  foreach(idir @PROJECT_INCLUDE_DIRS@)
    if(IS_ABSOLUTE ${idir} AND IS_DIRECTORY ${idir})
      set(include ${idir})
    elseif(IS_DIRECTORY @PKG_INCLUDE_PREFIX@/${idir})
      set(include @PKG_INCLUDE_PREFIX@/${idir})
    else()
      message(FATAL_ERROR "Project '@PROJECT_NAME@' specifies '${idir}' as an include dir, which is not found.  It does neither exist as an absolute directory nor in '@PKG_INCLUDE_PREFIX@/${idir}'.  Ask the maintainer '${@PROJECT_NAME@_MAINTAINER}' to fix it.")
    endif()
    list(APPEND @PROJECT_NAME@_INCLUDE_DIRS ${include})
  endforeach()
endif()

foreach(lib @PROJECT_LIBRARIES@)
  if(NOT TARGET ${lib})
    set(paths "")
    foreach(path @PKG_CONFIG_LIB_PATHS@)
      set(onelib "${lib}-NOTFOUND")
      find_library(onelib ${lib}
        PATHS ${path}
        NO_DEFAULT_PATH
        )
      if(onelib)
        list(APPEND paths ${path})
        break()
      endif()
    endforeach()
    list(LENGTH paths paths_count)
    if(paths_count EQUAL 0)
      message(FATAL_ERROR "Project '${PROJECT_NAME}' tried to find library '${lib}'.  The CMake config for '@PROJECT_NAME@' is available but the library '${lib}' is neither a target nor installed properly.  Did you compiled project '@PROJECT_NAME@'?  Did you find_package() it before the subdirectory containing its code is included?")
    endif()
    list(GET paths 0 path)
    list(APPEND @PROJECT_NAME@_LIBRARY_DIRS ${path})
    list(APPEND @PROJECT_NAME@_LIBRARIES ${onelib})
  else()
    list(APPEND @PROJECT_NAME@_LIBRARIES ${lib})
  endif()
endforeach()

foreach(dep @PROJECT_DEPENDS@)
  if(NOT ${dep}_FOUND)
    find_package(${dep})
  endif()
  list(APPEND @PROJECT_NAME@_INCLUDE_DIRS ${${dep}_INCLUDE_DIRS})
  list(APPEND @PROJECT_NAME@_LIBRARIES ${${dep}_LIBRARIES})
  list(APPEND @PROJECT_NAME@_LIBRARY_DIRS ${${dep}_LIBRARY_DIRS})
endforeach()

if(@PROJECT_NAME@_INCLUDE_DIRS)
  list(REMOVE_DUPLICATES @PROJECT_NAME@_INCLUDE_DIRS)
endif()
if(@PROJECT_NAME@_LIBRARIES)
  remove_duplicate_libraries(@PROJECT_NAME@_LIBRARIES @PROJECT_NAME@_LIBRARIES)
endif()
if(@PROJECT_NAME@_LIBRARY_DIRS)
  list(REMOVE_DUPLICATES @PROJECT_NAME@_LIBRARY_DIRS)
endif()

foreach(extra @PROJECT_CFG_EXTRAS@)
  include(@PKG_CMAKE_DIR@/${extra})
endforeach()
