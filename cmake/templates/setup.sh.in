#!/usr/bin/env sh
# generated from catkin/cmake/template/setup.sh.in

# Sets various environment variables and sources additional environment hooks.
# It tries it's best to undo changes from a previously sourced setup file before.
# Supported command line options:
# --extend: skips the undoing of changes from a previously sourced setup file

_SETUP_UTIL="@SETUP_DIR@/_setup_util.py"

if [ ! -f "$_SETUP_UTIL" ]; then
  echo "Missing Python script: $_SETUP_UTIL"
  return 22
fi

# detect if running on Darwin platform
_UNAME=`which uname`
_UNAME=`$_UNAME`
_IS_DARWIN=0
if [ "$_UNAME" = "Darwin" ]; then
  _IS_DARWIN=1
fi

# make sure to export all environment variables
export CMAKE_PREFIX_PATH
export CPATH
if [ $_IS_DARWIN -eq 0 ]; then
  export LD_LIBRARY_PATH
else
  export DYLD_LIBRARY_PATH
fi
export PATH
export PKG_CONFIG_PATH
export PYTHONPATH

# invoke Python script to generate necessary exports of environment variables
_MKTEMP=`which mktemp`
_SETUP_TMP=`$_MKTEMP /tmp/setup.sh.XXXXXXXXXX`
if [ $? -ne 0 -o ! -f "$_SETUP_TMP" ]; then
  echo "Could not create temporary file: $_SETUP_TMP"
  return 1
fi
$_SETUP_UTIL $@ > $_SETUP_TMP
. $_SETUP_TMP
_RM=`which rm`
$_RM $_SETUP_TMP

# remember type of shell if not already set
if [ -z "$CATKIN_SHELL" ]; then
  CATKIN_SHELL=sh
fi

# find all environment hooks
_ENV_HOOKS_GENERIC=""
_ENV_HOOKS_SPECIFIC=""
# order by workspace and ordered inside each workspace
_IFS=$IFS
IFS=":"
_FIND=`which find`
_SORT=`which sort`
# do not use variable names set in the environment since zsh will overwrite them
for _path in $CMAKE_PREFIX_PATH; do
  # ignore non-catkin workspaces
  if [ -z "$_path" -o ! -f "$_path/.catkin" ]; then
    continue
  fi
  _ENV_HOOKS_GENERIC="$($_FIND "$_path/etc/catkin/profile.d" -maxdepth 1 -name "*.sh" 2>/dev/null | $_SORT)
$_ENV_HOOKS_GENERIC"
  if [ "$CATKIN_SHELL" != "sh" ]; then
    _ENV_HOOKS_SPECIFIC="$($_FIND "$_path/etc/catkin/profile.d" -maxdepth 1 -name "*.$CATKIN_SHELL" 2>/dev/null | $_SORT)
$_ENV_HOOKS_SPECIFIC"
  fi
done
IFS=$_IFS

# source generic and shell-specific environment hooks
_IFS=$IFS
IFS="
"
for _envfile in $_ENV_HOOKS_GENERIC $_ENV_HOOKS_SPECIFIC; do
  . "$_envfile"
done
IFS=$_IFS
